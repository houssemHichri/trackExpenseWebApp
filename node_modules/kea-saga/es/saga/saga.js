import _regeneratorRuntime from 'babel-runtime/regenerator';

var _marked = [keaSaga].map(_regeneratorRuntime.mark);

import { call, take, cancel, fork } from 'redux-saga/effects';
import { eventChannel } from 'redux-saga';

var emitter = void 0;
var cancelCounter = 1;
var toCancel = {};

function createComponentChannel(socket) {
  return eventChannel(function (emit) {
    emitter = emit;
    return function () {};
  });
}

export function keaSaga() {
  var channel, _ref, _startSaga, _cancelSaga, saga, counter;

  return _regeneratorRuntime.wrap(function keaSaga$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return call(createComponentChannel);

        case 2:
          channel = _context.sent;

        case 3:
          if (!true) {
            _context.next = 20;
            break;
          }

          _context.next = 6;
          return take(channel);

        case 6:
          _ref = _context.sent;
          _startSaga = _ref.startSaga;
          _cancelSaga = _ref.cancelSaga;
          saga = _ref.saga;
          counter = _ref.counter;

          if (!_startSaga) {
            _context.next = 15;
            break;
          }

          _context.next = 14;
          return fork(saga);

        case 14:
          toCancel[counter] = _context.sent;

        case 15:
          if (!_cancelSaga) {
            _context.next = 18;
            break;
          }

          _context.next = 18;
          return cancel(toCancel[counter]);

        case 18:
          _context.next = 3;
          break;

        case 20:
        case 'end':
          return _context.stop();
      }
    }
  }, _marked[0], this);
}

export function startSaga(saga) {
  if (emitter) {
    cancelCounter += 1;
    emitter({ startSaga: true, saga: saga, counter: cancelCounter });
    return cancelCounter;
  }

  return null;
}

export function cancelSaga(counter) {
  if (emitter) {
    emitter({ cancelSaga: true, counter: counter });
  }
}