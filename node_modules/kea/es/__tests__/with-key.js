function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* global test, expect, beforeEach */
import { kea, getStore, resetKeaCache } from '../index';

import './helper/jsdom';
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { mount } from 'enzyme';
import { Provider } from 'react-redux';

var SampleComponent = function (_Component) {
  _inherits(SampleComponent, _Component);

  function SampleComponent() {
    _classCallCheck(this, SampleComponent);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  SampleComponent.prototype.render = function render() {
    var _props = this.props,
        id = _props.id,
        name = _props.name,
        capitalizedName = _props.capitalizedName;
    var updateName = this.actions.updateName;


    return React.createElement(
      'div',
      null,
      React.createElement(
        'div',
        { className: 'id' },
        id
      ),
      React.createElement(
        'div',
        { className: 'name' },
        name
      ),
      React.createElement(
        'div',
        { className: 'capitalizedName' },
        capitalizedName
      ),
      React.createElement(
        'div',
        { className: 'updateName', onClick: updateName },
        'updateName'
      )
    );
  };

  return SampleComponent;
}(Component);

var ActionComponent = function (_Component2) {
  _inherits(ActionComponent, _Component2);

  function ActionComponent() {
    _classCallCheck(this, ActionComponent);

    return _possibleConstructorReturn(this, _Component2.apply(this, arguments));
  }

  ActionComponent.prototype.render = function render() {
    return React.createElement(
      'div',
      null,
      React.createElement(
        'div',
        { className: 'actions' },
        Object.keys(this.actions).sort().join(',')
      ),
      React.createElement(
        'div',
        { className: 'props' },
        Object.keys(this.props).sort().join(',')
      ),
      React.createElement(
        'div',
        { className: 'name' },
        this.props.name
      )
    );
  };

  return ActionComponent;
}(Component);

beforeEach(function () {
  resetKeaCache();
});

test('singletons connect to react components', function () {
  var store = getStore();

  // create a dynamic logic store
  var mainLogic = kea({
    key: function key(props) {
      return props.id;
    },
    path: function path(key) {
      return ['scenes', 'main', key];
    },
    actions: function actions() {
      return {
        doit: true
      };
    },
    reducers: function reducers(_ref) {
      var _ref2;

      var actions = _ref.actions;
      return {
        done: [false, PropTypes.bool, (_ref2 = {}, _ref2[actions.doit] = function () {
          return true;
        }, _ref2)]
      };
    }
  });

  var singletonLogic = kea({
    path: function path() {
      return ['scenes', 'something'];
    },
    actions: function actions(_ref3) {
      var constants = _ref3.constants;
      return {
        updateName: function updateName(name) {
          return { name: name };
        }
      };
    },
    reducers: function reducers(_ref4) {
      var _ref5;

      var actions = _ref4.actions,
          constants = _ref4.constants;
      return {
        name: ['chirpy', PropTypes.string, (_ref5 = {}, _ref5[actions.updateName] = function (state, payload) {
          return payload.name;
        }, _ref5)]
      };
    },
    selectors: function selectors(_ref6) {
      var constants = _ref6.constants,
          _selectors = _ref6.selectors;
      return {
        capitalizedName: [function () {
          return [_selectors.name];
        }, function (name) {
          return name.trim().split(' ').map(function (k) {
            return '' + k.charAt(0).toUpperCase() + k.slice(1).toLowerCase();
          }).join(' ');
        }, PropTypes.string]
      };
    }
  });

  var ConnectedComponent = singletonLogic(SampleComponent);

  var wrapper = mount(React.createElement(
    Provider,
    { store: store },
    React.createElement(ConnectedComponent, { id: 12 })
  ));

  expect(wrapper.find('.id').text()).toEqual('12');
  expect(wrapper.find('.name').text()).toEqual('chirpy');
  expect(wrapper.find('.capitalizedName').text()).toEqual('Chirpy');

  expect(store.getState()).toEqual({ kea: {}, scenes: { something: { name: 'chirpy' } } });

  var sampleComponent = wrapper.find('SampleComponent').node;

  expect(sampleComponent.actions).toBeDefined();
  expect(Object.keys(sampleComponent.actions)).toEqual(['updateName']);

  var updateName = sampleComponent.actions.updateName;

  updateName('somename');

  expect(store.getState()).toEqual({ kea: {}, scenes: { something: { name: 'somename' } } });

  wrapper.render();

  expect(wrapper.find('.id').text()).toEqual('12');
  expect(wrapper.find('.name').text()).toEqual('somename');
  expect(wrapper.find('.capitalizedName').text()).toEqual('Somename');

  wrapper.unmount();
});

test('dynamic connect to react components', function () {
  var store = getStore();

  var dynamicLogic = kea({
    key: function key(props) {
      return props.id;
    },
    path: function path(key) {
      return ['scenes', 'something', key];
    },
    actions: function actions(_ref7) {
      var constants = _ref7.constants;
      return {
        updateName: function updateName(name) {
          return { name: name };
        }
      };
    },
    reducers: function reducers(_ref8) {
      var _ref9;

      var actions = _ref8.actions,
          constants = _ref8.constants;
      return {
        name: ['chirpy', PropTypes.string, (_ref9 = {}, _ref9[actions.updateName] = function (state, payload) {
          return payload.name + payload.key;
        }, _ref9)]
      };
    },
    selectors: function selectors(_ref10) {
      var constants = _ref10.constants,
          _selectors2 = _ref10.selectors;
      return {
        capitalizedName: [function () {
          return [_selectors2.name];
        }, function (name) {
          return name.trim().split(' ').map(function (k) {
            return '' + k.charAt(0).toUpperCase() + k.slice(1).toLowerCase();
          }).join(' ');
        }, PropTypes.string]
      };
    }
  });

  var ConnectedComponent = dynamicLogic(SampleComponent);

  var wrapper = mount(React.createElement(
    Provider,
    { store: store },
    React.createElement(ConnectedComponent, { id: 12 })
  ));

  expect(wrapper.find('.id').text()).toEqual('12');
  expect(wrapper.find('.name').text()).toEqual('chirpy');
  expect(wrapper.find('.capitalizedName').text()).toEqual('Chirpy');

  expect(store.getState()).toEqual({ kea: {}, scenes: { something: { 12: { name: 'chirpy' } } } });

  var sampleComponent = wrapper.find('SampleComponent').node;

  expect(sampleComponent.actions).toBeDefined();
  expect(Object.keys(sampleComponent.actions)).toEqual(['updateName']);

  var updateName = sampleComponent.actions.updateName;

  updateName('somename');

  expect(store.getState()).toEqual({ kea: {}, scenes: { something: { 12: { name: 'somename12' } } } });

  wrapper.render();

  expect(wrapper.find('.id').text()).toEqual('12');
  expect(wrapper.find('.name').text()).toEqual('somename12');
  expect(wrapper.find('.capitalizedName').text()).toEqual('Somename12');

  wrapper.unmount();
});

test('connected props can be used as selectors', function () {
  var store = getStore();

  var firstLogic = kea({
    path: function path() {
      return ['scenes', 'homepage', 'first'];
    },
    actions: function actions(_ref11) {
      var constants = _ref11.constants;
      return {
        updateName: function updateName(name) {
          return { name: name };
        }
      };
    },
    reducers: function reducers(_ref12) {
      var _ref13;

      var actions = _ref12.actions,
          constants = _ref12.constants;
      return {
        name: ['chirpy', PropTypes.string, (_ref13 = {}, _ref13[actions.updateName] = function (state, payload) {
          return payload.name;
        }, _ref13)]
      };
    }
  });

  var secondLogic = kea({
    path: function path() {
      return ['scenes', 'homepage', 'second'];
    },
    connect: {
      props: [firstLogic, ['name']],
      actions: [firstLogic, ['updateName']]
    },
    selectors: function selectors(_ref14) {
      var constants = _ref14.constants,
          _selectors3 = _ref14.selectors;
      return {
        capitalizedName: [function () {
          return [_selectors3.name];
        }, function (name) {
          return name.trim().split(' ').map(function (k) {
            return '' + k.charAt(0).toUpperCase() + k.slice(1).toLowerCase();
          }).join(' ');
        }, PropTypes.string]
      };
    }
  });

  var ConnectedComponent = secondLogic(SampleComponent);

  var wrapper = mount(React.createElement(
    Provider,
    { store: store },
    React.createElement(ConnectedComponent, { id: 12 })
  ));

  expect(wrapper.find('.id').text()).toEqual('12');
  expect(wrapper.find('.name').text()).toEqual('chirpy');
  expect(wrapper.find('.capitalizedName').text()).toEqual('Chirpy');

  expect(store.getState()).toEqual({ kea: {}, scenes: { homepage: { first: { name: 'chirpy' }, second: {} } } });

  var sampleComponent = wrapper.find('SampleComponent').node;

  expect(sampleComponent.actions).toBeDefined();
  expect(Object.keys(sampleComponent.actions)).toEqual(['updateName']);

  var updateName = sampleComponent.actions.updateName;

  updateName('somename');

  expect(store.getState()).toEqual({ kea: {}, scenes: { homepage: { first: { name: 'somename' }, second: {} } } });

  wrapper.render();

  expect(wrapper.find('.id').text()).toEqual('12');
  expect(wrapper.find('.name').text()).toEqual('somename');
  expect(wrapper.find('.capitalizedName').text()).toEqual('Somename');

  wrapper.unmount();
});

test('doubly connected actions are merged', function () {
  var store = getStore();

  var firstLogic = kea({
    actions: function actions(_ref15) {
      var constants = _ref15.constants;
      return {
        updateName: function updateName(name) {
          return { name: name };
        }
      };
    },
    reducers: function reducers(_ref16) {
      var _ref17;

      var actions = _ref16.actions,
          constants = _ref16.constants;
      return {
        name: ['chirpy', PropTypes.string, (_ref17 = {}, _ref17[actions.updateName] = function (state, payload) {
          return payload.name;
        }, _ref17)]
      };
    }
  });

  var secondLogic = kea({
    actions: function actions(_ref18) {
      var constants = _ref18.constants;
      return {
        updateNameAgain: function updateNameAgain(name) {
          return { name: name };
        }
      };
    }
  });

  var ConnectedComponent = firstLogic(secondLogic(ActionComponent));

  var wrapper = mount(React.createElement(
    Provider,
    { store: store },
    React.createElement(ConnectedComponent, null)
  ));

  expect(wrapper.find('.props').text()).toEqual('actions,dispatch,name,root');
  expect(wrapper.find('.actions').text()).toEqual('updateName,updateNameAgain');

  wrapper.unmount();
});

test('no protypes needed', function () {
  var store = getStore();

  var firstLogic = kea({
    actions: function actions(_ref19) {
      var constants = _ref19.constants;
      return {
        updateName: function updateName(name) {
          return { name: name };
        }
      };
    },
    reducers: function reducers(_ref20) {
      var _ref21;

      var actions = _ref20.actions,
          constants = _ref20.constants;
      return {
        name: ['chirpy', (_ref21 = {}, _ref21[actions.updateName] = function (state, payload) {
          return payload.name;
        }, _ref21)]
      };
    }
  });

  var secondLogic = kea({
    actions: function actions(_ref22) {
      var constants = _ref22.constants;
      return {
        updateNameAgain: function updateNameAgain(name) {
          return { name: name };
        }
      };
    }
  });

  var ConnectedComponent = firstLogic(secondLogic(ActionComponent));

  var wrapper = mount(React.createElement(
    Provider,
    { store: store },
    React.createElement(ConnectedComponent, null)
  ));

  expect(wrapper.find('.props').text()).toEqual('actions,dispatch,name,root');
  expect(wrapper.find('.actions').text()).toEqual('updateName,updateNameAgain');
  var sampleComponent = wrapper.find('ActionComponent').node;

  var updateName = sampleComponent.actions.updateName;

  updateName('somename');

  expect(wrapper.find('.name').text()).toEqual('somename');

  wrapper.unmount();
});