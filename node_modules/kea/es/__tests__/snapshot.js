function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* global test, expect, beforeEach */
import { kea, getStore, resetKeaCache } from '../index';

import './helper/jsdom';
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Provider } from 'react-redux';
import renderer from 'react-test-renderer';

var SampleComponent = function (_Component) {
  _inherits(SampleComponent, _Component);

  function SampleComponent() {
    _classCallCheck(this, SampleComponent);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  SampleComponent.prototype.render = function render() {
    var _props = this.props,
        id = _props.id,
        name = _props.name,
        capitalizedName = _props.capitalizedName;
    var updateName = this.actions.updateName;


    return React.createElement(
      'div',
      null,
      React.createElement(
        'div',
        { className: 'id' },
        id
      ),
      React.createElement(
        'div',
        { className: 'name' },
        name
      ),
      React.createElement(
        'div',
        { className: 'capitalizedName' },
        capitalizedName
      ),
      React.createElement(
        'div',
        { className: 'updateName', onClick: updateName },
        'updateName'
      )
    );
  };

  return SampleComponent;
}(Component);

beforeEach(function () {
  resetKeaCache();
});

test('snapshots must match', function () {
  var store = getStore();

  var singletonLogic = kea({
    path: function path() {
      return ['scenes', 'something'];
    },
    actions: function actions(_ref) {
      var constants = _ref.constants;
      return {
        updateName: function updateName(name) {
          return { name: name };
        }
      };
    },
    reducers: function reducers(_ref2) {
      var _ref3;

      var actions = _ref2.actions,
          constants = _ref2.constants;
      return {
        name: ['chirpy', PropTypes.string, (_ref3 = {}, _ref3[actions.updateName] = function (state, payload) {
          return payload.name;
        }, _ref3)]
      };
    },
    selectors: function selectors(_ref4) {
      var constants = _ref4.constants,
          _selectors = _ref4.selectors;
      return {
        capitalizedName: [function () {
          return [_selectors.name];
        }, function (name) {
          return name.trim().split(' ').map(function (k) {
            return '' + k.charAt(0).toUpperCase() + k.slice(1).toLowerCase();
          }).join(' ');
        }, PropTypes.string]
      };
    }
  });

  var ConnectedComponent = singletonLogic(SampleComponent);

  var tree = renderer.create(React.createElement(
    Provider,
    { store: store },
    React.createElement(ConnectedComponent, { id: 12 })
  )).toJSON();

  expect(tree).toMatchSnapshot();
});